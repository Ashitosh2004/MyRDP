name: RDP Access via Tailscale

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Enable Remote Desktop
        shell: pwsh
        run: |
          Write-Host "Enabling Remote Desktop..."
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force

          # Firewall rule
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389

          # Restart RDP service
          Restart-Service -Name TermService -Force

      - name: Create RDP User
        id: create_user
        shell: pwsh
        run: |
          Write-Host "Creating local RDP user..."

          Add-Type -AssemblyName System.Security

          $charSet = @{
            Upper   = [char[]](65..90)
            Lower   = [char[]](97..122)
            Number  = [char[]](48..57)
            Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }

          $rawPassword = @()
          $rawPassword += $charSet.Upper   | Get-Random -Count 3
          $rawPassword += $charSet.Lower   | Get-Random -Count 3
          $rawPassword += $charSet.Number  | Get-Random -Count 3
          $rawPassword += $charSet.Special | Get-Random -Count 3
          $password = -join ($rawPassword | Sort-Object { Get-Random })

          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"

          echo "password=$password" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Install Tailscale
        shell: pwsh
        run: |
          Write-Host "Installing Tailscale..."
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installer = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $url -OutFile $installer
          Start-Process msiexec.exe -ArgumentList "/i `"$installer`" /quiet /norestart" -Wait
          Remove-Item $installer -Force

      - name: Connect to Tailscale
        id: tailscale
        shell: pwsh
        run: |
          Write-Host "Bringing up Tailscale..."
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey ${{ secrets.TAILSCALE_AUTH_KEY }} --hostname "gh-runner-${{ github.run_id }}"

          # Wait for IP
          $tsIP = $null
          for ($i = 0; $i -lt 10; $i++) {
            $tsIP = (& "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 | Select-String "100\.") -replace "\s",""
            if ($tsIP) { break }
            Start-Sleep -Seconds 5
          }

          if (-not $tsIP) {
            Write-Error "No Tailscale IP assigned."
            exit 1
          }

          echo "ip=$tsIP" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Test RDP Connectivity
        shell: pwsh
        run: |
          Write-Host "Testing RDP port..."
          $result = Test-NetConnection -ComputerName "${{ steps.tailscale.outputs.ip }}" -Port 3389
          if (-not $result.TcpTestSucceeded) {
            Write-Error "RDP port not reachable."
            exit 1
          }
          Write-Host "RDP port reachable."

      - name: Display RDP Credentials
        shell: pwsh
        run: |
          Write-Host "`n=============================="
          Write-Host "âœ… RDP SESSION DETAILS"
          Write-Host "Tailscale IP:  ${{ steps.tailscale.outputs.ip }}"
          Write-Host "Username:      RDP"
          Write-Host "Password:      ${{ steps.create_user.outputs.password }}"
          Write-Host "==============================`n"

      - name: Keep Runner Alive
        shell: pwsh
        run: |
          Write-Host "Keeping RDP session alive. Press 'Cancel workflow' to stop."
          while ($true) {
            Write-Host "[$(Get-Date)] RDP active..."
            Start-Sleep -Seconds 300
          }
